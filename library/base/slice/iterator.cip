import super::super::iterator::Iterator

public type SliceIterator<T> {
    slice: $Slice<T>
    index: Integer,
}

implement<T> SliceIterator<T> {

    public label from: Function(slice: $Slice<T>) -> Self {
        return implied?(slice, implied 1)
    }
}

implement<T> Iterator<T> for SliceIterator<T> {

    public type Type := $T

    public label next: Function(&self) -> Option<Type> := {

        if self.index > self.slice.length {
            return None
        }

        label item = $self.slice[self.index]
        self.index += 1
        return Some($item)
    }
}

public type MutableSliceIterator<T> {
    slice: &Slice<T>
    index: Integer,
}

implement<T> MutableSliceIterator<T> {

    public label from: Function(slice: &Slice<T>) -> Self {
        return implied?(slice, implied 1)
    }
}

implement<T> Iterator<T> for MutableSliceIterator<T> {

    public type Type := &T

    public label next: Function(&self) -> Option<Type> := {

        if self.index > self.slice.length {
            return None
        }

        label item = &self.slice[self.index]
        self.index += 1
        return Some(&item)
    }
}
