module iterator

export iterator::any

import iterator::any
import super::clone::Clone
import super::compare::Equal
import super::format::Debug

public structure Slice<T> {
    address: Pointer<T>
    size: Integer
}

implement<T> Slice<T> {

    public label is_empty: Function($self) -> Boolean {
        match self.size {
            case 0 -> return true
            case any -> return false
        }
    }

    public label length: Function($self) -> Integer := {
        return self.size
    }

    public label iterator: Function($self) -> SliceIterator<T> := {
        return SliceIterator::from($self)
    }

    public label mutable_iterator: Function(&self) -> MutableSliceIterator<T> := {
        return MutableSliceIterator::from(&self)
    }
}

implement<T: Equal> Slice<T> {

    public label contains: Function($self, compare: $T) -> Boolean := {
        return self.iterator().find({ return item == compare }).is_some()
    }
}

implement<T: Equal & Clone> Slice<T> {

    public label replace: Function($self, from: $T, to: T) := {
        iterate self.mutable_iterator() as item {
            if item == from {
                item := clone?(to)
            }
        }
    }
}

implement<T> Clone for Slice<T> {

    public label clone: Function($self) -> Self := {
        @ ...
    }
}

implement<T: Equal> Equal for Slice<T> {

    public label is_equal: Function($self, other: $Self) -> Boolean := {
        @ ...
    }
}

implement<T> Index<T> for Slice<T> {

    public label index: Function($self, index: Integer) -> $T := {
        @ ...
    }
}

implement<T> MutableIndex<T> for Slice<T> {

    public label mutable_index: Function(&self, index: Integer) -> &T := {
        @ ...
    }
}

implement<T: Debug> Debug for Slice<T> {

    public label debug: Function($self) -> String := {
        @ ...
    }
}
