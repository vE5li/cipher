module from

export from::FromIterator

import from::FromIterator
import super::Option

public trait Iterator<T> {

    public type Type

    public label next: Function(&self) -> Option<Type>
}

implement<T> Iterator<T> {

    public label for_each: Function(&self, function: Function(item: Type)) := {
        while case Some: item == self.next() {
            function(raw?(item))
        }
    }

    public label find: Function(&self, function: Function(item: Type) -> Option<Type>) := {
        while case Some: item == self.next() {
            if function($item) {
                return Some(raw?(item))
            }
        }
        return None
    }

    public label map: Function<R>(&self, function: Function(item: Type) -> R) -> HeapIterator<R> := {
        @ ...
    }

    public label enumerate: Function(&self) -> HeapIterator<(Type, Integer)> := {
        @ ...
    }

    public label collect<R: FromIterator>: Function(self) -> R {
        return R::from_iterator(self)
    }
}

implement<T: Clone> Iterator<T> {

    public label cloned: Function($self) -> Self := {
        @ ...
    }
}

implement Iterator<String> {

    public label join: Function(self) -> String {
        label string := mutable String::new()
        self.for_each({ string.push_string_back($item) })
        return cast_implied?(string)
    }
}
