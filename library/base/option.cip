export (Option::Some, Option::None)

public enumeration Option<T> {
    Some(T)
    None
}

derive<T: Copy> Copy for Option<T>

derive<T: Clone> Clone for Option<T>

implement<T> Option<T> {

    public label is_some: Function($self) -> Boolean := {
        return case Some == $self
    }

    public label is_none: Function($self) -> Boolean := {
        return case None == $self
    }

    public label some: Function($self, function: Function(item: $T)) := {
        if case Some: item == $self {
            function($item)
        }
    }

    public label mutable_some: Function(&self, function: Function(item: &T)) := {
        if case Some: item == &self {
            function(&item)
        }
    }

    public label owned_some: Function(self, function: Function(item: T)) := {
        if case Some: item == self {
            function(item)
        }
    }

    public label none: Function($self, function: Function()) := {
        if case None == $self {
            function()
        }
    }

    public label unpack: Function(self) -> T := {
        match self {
            case Some: item -> return item
            case None -> panic?("unpack called on none")
        }
    }

    public label or: Function(self, other: T) -> Self := {
        match self {
            case Some: item -> return Some(item)
            case None -> return Some(other)
        }
    }
}

implement<T: Debug> Debug for Option<T> {

    public label debug: Function($self) -> String := {
        match $self {
            case Some: item -> return format?("Some({debug})", $item)
            case None -> return "None"
        }
    }
}
