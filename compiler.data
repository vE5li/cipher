core            [ tokenizer parser builder ]

dependencies    [ string color format debug file ]

pipeline        [ resolve @@ optimize generate @@ ]

project {
    name            "h0vs"
    author          "ve5li"
    contact         "ve5li@tuta.io"
}

directory {
    core            "/usr/share/seamonkey/h0vs/core/"
    pass            "/usr/share/seamonkey/h0vs/passes/"
    library         "/usr/share/seamonkey/h0vs/library/"
    utility         "/usr/share/seamonkey/qtc8/library/"
}

extention {
    assembly        "asm"
    logic           "uni"
    program         "prg"
    cache           "che"
}

file_settings {
    #extention      "cip"
    #submodule      "module"
}

user_functions {
    "verify"        #function:verify
    "build"         #function:build
    "rebuild"       #function:rebuild
    "clean"         #function:clean
    "assemble"      #function:assemble
    "route"         #function:route
}

new_file "label main: Function(arguments: Vector<String>) -> Integer := {\n\n    print_line?(\"hello, world!\")\n    return 0\n}\n"

#function {

    append_seperator [ [ #single source ] [ #single seperator ]
        #if             [ #data #equals ] [ #scope:source:-1 ] [ #scope:seperator ]
        #return         [ #scope:source ]
        #else
        #string         [ #scope:source ] [ #scope:seperator ]
        #return         [ #last ]
        #end
    ]

    process_arguments [ [ #single arguments ]

        @ create configuration and index
        #modify         [ #data #scope:configuration ] [ #data { debug $false symbols $false lucky $false source "source/" output "output/" libraries [ ] } ]
        #length         [ #scope:arguments ]
        #modify         [ #data #scope:count ] [ #last ]
        #modify         [ #data #scope:index ] [ #data 1 ]

        @ iterate over all arguments and match
        #while          [ #data #not_bigger ] [ #scope:index ] [ #scope:count ]
        #index          [ #scope:arguments ] [ #scope:index ]

        @ set output directory
        #if             [ #data #equals ] [ #last ] [ #data "-o" ]
        #ensure         [ #data #bigger ] [ #scope:count ] [ #scope:index ] [ #data "expected output directory" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data output_set ] [ #data "output directory may only be spceified once" ]
        #modify         [ #data #scope:output_set ] [ #data $true ]
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]
        #index          [ #scope:arguments ] [ #scope:index ]
        #call           [ #function:append_seperator ] [ #last ] [ #data '/' ]
        #modify         [ #data #scope:configuration:output ] [ #last ]

        @ set source directory
        #else           [ #data #equals ] [ #last ] [ #data "-s" ]
        #ensure         [ #data #bigger ] [ #scope:count ] [ #scope:index ] [ #data "expected source directory" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data source_set ] [ #data "source directory may only be spceified once" ]
        #modify         [ #data #scope:source_set ] [ #data $true ]
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]
        #index          [ #scope:arguments ] [ #scope:index ]
        #call           [ #function:append_seperator ] [ #last ] [ #data '/' ]
        #modify         [ #data #scope:configuration:source ] [ #last ]

        @ add external library
        #else           [ #data #equals ] [ #last ] [ #data "-l" ]
        #ensure         [ #data #bigger ] [ #scope:count ] [ #scope:index ] [ #data "expected library" ]
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]
        #index          [ #scope:arguments ] [ #scope:index ]
        #ensure         [ #data #not_contains ] [ #scope:configuration:libraries ] [ #last ] [ #data "library " ] [ #last ] [ #data " may only be included once" ]
        #append         [ #scope:configuration:libraries ] [ #last ]
        #modify         [ #data #scope:configuration:libraries ] [ #last ]

        @ dump symbols
        #else           [ #data #equals ] [ #last ] [ #data "-S" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data symbols_set ] [ #data "symbols flag may only be set once" ]
        #modify         [ #data #scope:symbols_set ] [ #data $true ]
        #modify         [ #data #scope:configuration:symbols ] [ #data $true ]

        @ lucky
        #else           [ #data #equals ] [ #last ] [ #data "-L" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data lucky_set ] [ #data "lucky flag may only be set once" ]
        #modify         [ #data #scope:lucky_set ] [ #data $true ]
        #modify         [ #data #scope:configuration:lucky ] [ #data $true ]

        @ enable debug
        #else           [ #data #equals ] [ #last ] [ #data "-d" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data debug_set ] [ #data "debug flag may only be set once" ]
        #modify         [ #data #scope:debug_set ] [ #data $true ]
        #modify         [ #data #scope:configuration:debug ] [ #data $true ]

        @ add source file
        #else
        #ensure         [ #data #not_equals ] [ #last:1 ] [ #data '-' ] [ #data "invalid flag " ] [ #last ]
        #error          [ #data "unexpected parameter " ] [ #last ]
        #end

        @ increment argument index
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]

        @ return configuration
        #end
        #return         [ #scope:configuration ]
    ]

    new [ [ #single arguments ]

        @ make sure the right number of arguments is passed
        #ensure         [ #data #not_empty ] [ #scope:arguments ] [ #data "expected a project name" ]
        #ensure         [ #data #smaller ] [ #scope:arguments ] [ #data 3 ] [ #data "too many parameters provided" ]

        @ make sure directory does not already exist
        #if             [ #data #file_present ] [ #scope:arguments:1 ]
        #print_line     [ #data "directory already exists, nothing was changed" ]
        #terminate
        #end

        @ get the path of the main file
        #if             [ #data #bigger ] [ #scope:arguments ] [ #data 1 ]
        #call           [ #function:append_seperator ] [ #scope:arguments:2 ] [ #data '/' ]
        #string         [ #scope:arguments:1 ] [ #data '/' ] [ #last ] [ #data "main.cip" ]
        #else
        #string         [ #scope:arguments:1 ] [ #data "/source/main.cip" ]
        #end
        #modify         [ #data #scope:path ] [ #last ]

        @ load the file library
        #string         [ #root:directory:utility ] [ #data "file" ]
        #read_map       [ #last ]
        #merge          [ #root ] [ #last ]
        #modify         [ #data #root ] [ #last ]

        @ create the new file with default main function
        #call           [ #function:#file:write_create ] [ #scope:path ] [ #root:new_file ]
        #print_line     [ #data "created main file at " ] [ #scope:path ]
    ]

    #main [ [ #single name ] [ #single function ] [ #list arguments ]

        @ if the user wants to create a new project
        #if             [ #data #equals ] [ #scope:function ] [ #data "new" ]
        #call           [ #function:new ] [ #scope:arguments ]
        #terminate
        #end

        @ take initial time passed
        #time
        #modify         [ #data #scope:start_time ] [ #last ]

        @ process command line arguments
        #call           [ #function:process_arguments ] [ #scope:arguments ]
        #modify         [ #data #scope:configuration ] [ #last ]

        @ load libraries
        #call           [ #function:#print:setup ] [ #data "loading libraries..." ]
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:utility ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #root ] [ #last ]
        #modify         [ #data #root ] [ #last ]
        #end            [ #data #always ]

        @ if the user is trying to invoke a valid function
        #if             [ #data #present ] [ #root:user_functions ] [ #scope:function ]
        #call           [ #function:#print:setup ] [ #data "running " ] [ #scope:function ] [ #data "..." ]
        #index          [ #root:user_functions ] [ #scope:function ]
        #resolve        [ #last ]
        #call           [ #last ] [ #scope:name ] [ #scope:configuration ]

        @ if the user is trying to invoke an invalid function
        #else           [ #data #always ]
        #call           [ #function:#print:error ] [ #data "compiler has no function called " ] [ #scope:function ]
        #end            [ #data #always ]

        @ lucky
        #if             [ #data #true ] [ #scope:configuration:lucky ]
        #length         [ #root:lucky ]
        #random         [ #data 1 ] [ #last ]
        #index          [ #root:lucky ] [ #last ]
        #call           [ #function:#print:color ] [ #root:#color:magenta ] [ #data "lucky" ] [ #last ]
        #end

        @ print out the elapsed time in seconds
        #time
        #subtract       [ #last ] [ #scope:start_time ]
        #divide         [ #last ] [ #data 1000.0 ]
        #call           [ #function:#print:success ] [ #data "completed in " ] [ #last ] [ #data "s"]
    ]

    load_cache [ [ #single name ] [ #single output ]
        #call           [ #function:#print:build ] [ #data "loading cache..." ]
        #string         [ #scope:name ] [ #data "." ] [ #root:extention:cache ]
        #call           [ #function:#file:read_create_map ] [ #scope:output ] [ #last ]
        #insert         [ #root ] [ #data #cache ] [ #last ]
        #modify         [ #data #root ] [ #last ]
    ]

    save_cache [ [ #single name ] [ #single output ]
        #call           [ #function:#print:build ] [ #data "saving cache..." ]
        #string         [ #scope:output ] [ #scope:name ] [ #data "." ] [ #root:extention:cache ]
        #write_map      [ #last ] [ #root:#cache ]
    ]

    load_compiler [

        @ load the file settings and the pipeline
        #call           [ #function:#print:build ] [ #data "loading language..." ]
        #map            [ #data #file_settings ] [ #root:file_settings ] [ #data #pipeline ] [ #root:pipeline ] [ #data module_scope ] [ #data [ ] ]
        #modify         [ #data #scope:compiler ] [ #last ]

        @ load compiler libraries
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:utility ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end            [ #data #always ]

        @ load compiler core
        #iterate        [ #root:core ]
        #string         [ #root:directory:core ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end            [ #data #always ]

        @ load passes
        #iterate        [ #root:pipeline ]
        #string         [ #root:directory:pass ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end            [ #data #always ]

        @ return initialized compiler
        #return         [ #scope:compiler ]
    ]

    invoke_compiler [ [ #single debug ] [ #single arguments ]

        @ if debug more is enabled
        #if             [ #data #true ] [ #scope:debug ]
        #append         [ #scope:arguments ] [ #data "-d" ]
        #invoke         [ #data #system ] [ #last ]

        @ if debug mode is not enabled
        #else
        #invoke         [ #data #silent ] [ #scope:arguments ]
        #end
        #return         [ #last ]
    ]

    verify [ [ #single name ] [ #single configuration ]
        @#call           [ #function:load_cache ] [ #scope:name ] [ #scope:name ]
        #call           [ #function:load_compiler ]
        #compile_module [ #last ] [ #data main ] [ #scope:configuration:source ]
        #modify         [ #data #scope:main ] [ #last ]
        @#call           [ #function:save_cache ] [ #scope:name ] [ #scope:name ]
        #return         [ #scope:main ]
    ]

    build [ [ #single name ] [ #single configuration ]

        @ compile the main module and save the cache
        #call           [ #function:verify ] [ #scope:name ] [ #scope:configuration ]
        #modify         [ #data #scope:main ] [ #last ]

        @ output the generated assembly code and assemble and rout it
        #string         [ #scope:configuration:output ] [ #scope:name ] [ #data "." ] [ #root:extention:assembly ]
        #system         [ #data "cp" ] [ #data "example/main.asm" ] [ #last ]
        @#call           [ #function:#file:write_create ] [ #last ] [ #data "code" ]
        @#call           [ #function:#file:write_create ] [ #last ] [ #scope:main:code ]
        #call           [ #function:assemble ] [ #scope:name ] [ #scope:configuration ]
        #call           [ #function:route ] [ #scope:name ] [ #scope:configuration ]
    ]

    rebuild [ [ #single name ] [ #single configuration ]
        #call           [ #function:clean ] [ #scope:name ] [ #scope:configuration ]
        #call           [ #function:build ] [ #scope:name ] [ #scope:configuration ]
    ]

    clean [ [ #single ] [ #single configuration ]
        #call           [ #function:#print:clean ] [ #data "removing build files..." ]
        #string         [ #data "rm -rf " ] [ #scope:configuration:output ] [ #data "*" ]
        #system         [ #data "bash" ] [ #data "-c" ] [ #last ]
    ]

    assemble [ [ #single name ] [ #single configuration ]

        @ get the path of the source and outputfile
        #string         [ #scope:configuration:output ] [ #scope:name ] [ #data '.' ] [ #root:extention:assembly ]
        #modify         [ #data #scope:source_file ] [ #last ]
        #string         [ #scope:configuration:output ] [ #scope:name ] [ #data '.' ] [ #root:extention:logic ]
        #modify         [ #data #scope:output_file ] [ #last ]

        @ make sure that the source file exists
        #if             [ #data #not_file_present ] [ #scope:source_file ]
        #error          [ #data "file to be assembled was not found, try running build first" ]
        #end

        @ invoke doofenshmirtz to assemble
        #call           [ #function:#print:build ] [ #data "assembling..." ]
        #list           [ #data "doofenshmirtz" ] [ #scope:source_file ] [ #data "-o" ] [ #scope:output_file ]
        #call           [ #function:invoke_compiler ] [ #scope:configuration:debug ] [ #last ]

        @ terminate compilation if assembling failed
        #if             [ #data #false ] [ #last ]
        #error          [ #data "failed to assemble" ]
        #end            [ #data #always ]
    ]

    route [ [ #single name ] [ #single configuration ]

        @ get the path of the source and outputfile
        #string         [ #scope:configuration:output ] [ #scope:name ] [ #data '.' ] [ #root:extention:logic ]
        #modify         [ #data #scope:source_file ] [ #last ]
        #string         [ #scope:configuration:output ] [ #scope:name ] [ #data '.' ] [ #root:extention:program ]
        #modify         [ #data #scope:output_file ] [ #last ]

        @ make sure that the source file exists
        #if             [ #data #not_file_present ] [ #scope:source_file ]
        #error          [ #data "file to be routed was not found, try running build first" ]
        #end

        @ invoke entleman to route
        #call           [ #function:#print:build ] [ #data "routing..." ]
        #list           [ #data "entleman" ] [ #scope:source_file ] [ #data "-o" ] [ #scope:output_file ]
        #if             [ #data #true ] [ #scope:configuration:symbols ]
        #append         [ #last ] [ #data "-S" ]
        #end
        #call           [ #function:invoke_compiler ] [ #scope:configuration:debug ] [ #last ]

        @ terminate compilation if routing failed
        #if             [ #data #false ] [ #last ]
        #error          [ #data "failed to route" ]
        #end            [ #data #always ]
    ]

    #print {

        setup [ [ #list message ]
            #list           [ #data "[ setup ] " ]
            #merge          [ #last ] [ #scope:message ]
            #invoke         [ #data #print_line ] [ #last ]
        ]

        clean [ [ #list message ]
            #list           [ #root:#color:magenta ] [ #data "clean" ]
            #merge          [ #last ] [ #scope:message ]
            #call_list      [ #function:#print:color ] [ #last ]
        ]

        build [ [ #list message ]
            #list           [ #root:#color:cyan ] [ #data "build" ]
            #merge          [ #last ] [ #scope:message ]
            #call_list      [ #function:#print:color ] [ #last ]
        ]
    }
}

lucky [
    "it finally compiled, huh?"
    "not all sticks are turtles but all turtles are sticks"
    "<3"
]
