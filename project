core            [ tokenizer parser builder ]

dependencies    [ string color format debug file ]

pipeline        [ resolve @@ optimize generate@@ ]

project {
    name            "h0vs"
    author          "ve5li"
    contact         "ve5li@tuta.io"
}

directory {
    library         "/home/code/qtc8/library/"
    core            "/home/code/h0vs/core/"
    pass            "/home/code/h0vs/pass/"
}

extention {
    assembly        "asm"
    logic           "uni"
    program         "prg"
    cache           "che"
}

file_settings {
    #extention      "cip"
    #submodule      "module"
}

user_methods {
    "verify"        #method:verify
    "build"         #method:build
    "rebuild"       #method:rebuild
    "clean"         #method:clean
    "assemble"      #method:assemble
    "route"         #method:route
}

#method {

    #main [ [ #single method ] [ #single name ] [ #single source ] [ #single output ] [ #single library ] [ #list flags ]

        @
        #time
        #set            [ #data start_time ] [ #last ]

        @
        #insert         [ #root ] [ #data name ] [ #scope:name ] @ PARSE INTERNALLY
        #insert         [ #last ] [ #data source ] [ #scope:source ] @ PARSE INTERNALLY
        #insert         [ #last ] [ #data output ] [ #scope:output ] @ PARSE INTERNALLY
        #insert         [ #last ] [ #data library ] [ #scope:library ] @ PARSE INTERNALLY
        #insert         [ #last ] [ #data flags ] [ #scope:flags ] @ PARSE INTERNALLY
        #modify         [ #data #root ] [ #last ]

        @
        #call           [ #method:print:setup ] [ #data "loading libraries..." ]
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:library ] [ #last:instance ]
        #read_map       [ #last ]
        #merge          [ #root ] [ #last ]
        #modify         [ #data #root ] [ #last ]
        #end            [ #data #always ]

        @
        #if             [ #data #present ] [ #root:user_methods ] [ #scope:method ]
        #call           [ #method:print:setup ] [ #data "running " ] [ #scope:method ] [ #data "..." ]
        #index          [ #root:user_methods ] [ #scope:method ]
        #resolve        [ #last ]
        #call           [ #last ]
        #else           [ #data #always ]
        #call           [ #method:print:error ] [ #data "compiler has no method called " ] [ #scope:method ]
        #end            [ #data #always ]

        @
        #time
        #subtract       [ #last ] [ #scope:start_time ]
        #divide         [ #last ] [ #data 1000.0 ]
        #call           [ #method:print:success ] [ #data "completed in " ] [ #last ] [ #data "s"]
    ]

    load_cache [
        #call           [ #method:print:build ] [ #data "loading cache..." ]
        #string         [ #root:name ] [ #data "." ] [ #root:extention:cache ]
        #call           [ #method:read_create_map ] [ #root:output ] [ #last ]
        #insert         [ #root ] [ #data #cache ] [ #last ]
        #modify         [ #data #root ] [ #last ]
    ]

    save_cache [
        #call           [ #method:print:build ] [ #data "saving cache..." ]
        #string         [ #root:output ] [ #root:name ] [ #data "." ] [ #root:extention:cache ]
        #write_map      [ #last ] [ #root:#cache ]
    ]

    load_compiler [
        #call           [ #method:print:build ] [ #data "loading language..." ]
        #map            [ #data #file_settings ] [ #root:file_settings ] [ #data #pipeline ] [ #root:pipeline ]
        #insert         [ #root ] [ #data compiler ] [ #last ]
        #modify         [ #data #root ] [ #last ]
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:library ] [ #last:instance ]
        #read_map       [ #last ]
        #merge          [ #root:compiler ] [ #last ]
        #modify         [ #data #root:compiler ] [ #last ]
        #end            [ #data #always ]
        #iterate        [ #root:core ]
        #string         [ #root:directory:core ] [ #last:instance ]
        #read_map       [ #last ]
        #merge          [ #root:compiler ] [ #last ]
        #modify         [ #data #root:compiler ] [ #last ]
        #end            [ #data #always ]
        #iterate        [ #root:pipeline ]
        #string         [ #root:directory:pass ] [ #last:instance ]
        #read_map       [ #last ]
        #merge          [ #root:compiler ] [ #last ]
        #modify         [ #data #root:compiler ] [ #last ]
        #end            [ #data #always ]
        #insert         [ #root:compiler ] [ #data module_scope ] [ #data [] ]
        #modify         [ #data #root:compiler ] [ #last ]
    ]

    clean [
        #call           [ #method:print:clean ] [ #data "removing build files..." ]
        #string         [ #data "rm -rf " ] [ #root:output ] [ #data "*" ]
        #system         [ #data "bash" ] [ #data "-c" ] [ #last ]
    ]

    verify [

        @ load the compiler and cache
        #call           [ #method:load_compiler ]
        @#call           [ #method:load_cache ]

        @ compile the main module and save the cache
        #compile_module [ #root:compiler ] [ #data main ] [ #root:source ]
        @#call           [ #method:save_cache ]
    ]

    build [

        @ load the compiler and cache
        #call           [ #method:load_compiler ]
        @#call           [ #method:load_cache ]

        @ compile the main module and save the cache
        #compile_module [ #root:compiler ] [ #data main ] [ #root:source ]
        #insert         [ #root ] [ #data main ] [ #last ]
        #modify         [ #data #root ] [ #last ]
        @#call           [ #method:save_cache ]

        @ output the generated assembly code and assemble and rout it
        #string         [ #root:name ] [ #data "." ] [ #root:extention:assembly ]
        #call           [ #method:write_create ] [ #root:output ] [ #last ] [ #data "code" ]
        #call           [ #method:assemble ]
        @#call           [ #method:route ]
    ]

    assemble [
        @ check if file is there -> if not, tell used to run build
        #call           [ #method:print:build ] [ #data  "assembling..." ] @ ALSO PASS -d IF DEBUG IS ENABLED, ALSO PASS -n FOR SETTING AN ALTERNATIVE NAME FOR THE MODULE (in this case opal instead of nt33)
        #silent         [ #data "opal" ] [ #data "example/main.asm" ] [ #data "-o" ] [ #data "output/nt33.uni" ] @[ #data "-c" ] [ #data "output/nt33.che" ] @ MAKE THIS WORK WITH THE LOCAL VARIABLES
        #if             [ #data #false ] [ #last ]
        #error          [ #data "failed to assemble" ]
        #end            [ #data #always ]
    ]

    route [
        @ check if file is there -> if not, tell used to run build
        #call           [ #method:print:build ] [ #data "routing..." ] @ ALSO PASS -d IF DEBUG IS ENABLED, ALSO PASS -s IF RELEASE IS NOT ENABLED
        #silent         [ #data "entleman" ] [ #data "example/nt33.uni" ] [ #data "-o" ] [ #data "output/nt33.prg" ] @[ #data "-c" ] [ #data "output/nt33.che" ] @ MAKE THIS WORK WITH THE LOCAL VARIABLES
        #if             [ #data #false ] [ #last ]
        #error          [ #data "failed to route" ]
        #end            [ #data #always ]
    ]

    rebuild [
        #call           [ #method:clean ]
        #call           [ #method:build ]
    ]

    print {

        setup [ [ #list message ]
            #list           [ #data "[ setup ] " ]
            #merge          [ #last ] [ #scope:message ]
            #invoke         [ #data #print_line ] [ #last ]
        ]

        clean [ [ #list message ]
            #list           [ #root:color:magenta ] [ #data "clean" ]
            #merge          [ #last ] [ #scope:message ]
            #call_list      [ #method:print:color ] [ #last ]
        ]

        build [ [ #list message ]
            #list           [ #root:color:cyan ] [ #data "build" ]
            #merge          [ #last ] [ #scope:message ]
            #call_list      [ #method:print:color ] [ #last ]
        ]
    }
}
