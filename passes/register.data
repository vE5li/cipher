#function {

    register {

        structure [ [ #single self ] [ #single path ]

            @ make sure type is unique

            @
            #path           [ #scope:path ] [ #data types ] [ #scope:self:name ]
            #modify         [ #last ] [ #scope:self ]
            #return         [ #scope:self ]
        ]

        alias [ [ #single self ] [ #single path ]

            @ make sure type is unique

            @
            #map            [ #data alias ] [ #scope:self:type ]
            #modify         [ #data #scope:entry ] [ #last ]

            @
            #path           [ #scope:path ] [ #data types ] [ #scope:self:alias ]
            #modify         [ #last ] [ #scope:entry ]
            #return         [ #scope:self ]
        ]

        assign [ [ #single self ] [ #single path ]

            @ make sure label is unique

            @
            #insert         [ #build:root_scope:labels ] [ #scope:self:label ] [ #scope:self ]
            #modify         [ #data #build:root_scope:labels ] [ #last ]
            #return         [ #scope:self ]
        ]

        top [ [ #single self ]

            @ if debug is enabled, print the current pass
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:print_pass ] [ #data "register" ]
            #end

            @
            #modify         [ #data #build:root_scope ] [ #data { types { } namespaces { } labels { } } ]

            @ TODO: do this through includes
            #modify         [ #data #build:root_scope:types ] [ #data { Character { native integer signed $false } Integer { native integer signed $false } SingedInteger { native integer signed $true } } ]

            @ if present, pass blocks and return self
            #if             [ #data #present ] [ #scope:self ] [ #data blocks ]
            #pass           [ #scope:self:blocks ] [ #data #build:root_scope ]
            #end
            #return         [ #scope:self ]
        ]
    }
}
