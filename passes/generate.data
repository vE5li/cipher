#function {

    @@
    @ generate llvm names
    #iterate        [ #build:real_types ]
    #modify         [ #data #scope:entry ] [ #last:instance ] [ #data #scope:name ] [ #last:selector ]

    @ llvm native types
    #if             [ #data #present ] [ #scope:entry ] [ #data native ]
    #if             [ #data #equals ] [ #scope:entry:native ] [ #data integer ]
    #modify         [ #data #scope:entry:llvm_name ] [ #data "i32" ]
    #else           [ #data #equals ] [ #scope:entry:native ] [ #data signed_integer ]
    #modify         [ #data #scope:entry:llvm_name ] [ #data "i32" ]
    #end

    @ structures
    #else
    #string         [ #data "%type." ] [ #scope:name ]
    #modify         [ #data #scope:entry:llvm_name ] [ #last ]
    #end

    @ overwrite modified entry
    #overwrite      [ #build:real_types ] [ #scope:name ] [ #scope:entry ]
    #modify         [ #data #build:real_types ] [ #last ]
    #end
    @@

    generate {

        mangle [ [ #single path ] [ #single prefix ]

            @
            #resolve        [ #scope:path ]
            #modify         [ #data #scope:entry ] [ #last ]

            @
            #iterate        [ #scope:entry:types ]
            #if             [ #data #present ] [ #last:instance ] [ #data native ]
            #path           [ #data #scope:entry:types ] [ #last:selector ] [ #data mangled_name ]
            #modify         [ #last ] [ #data "i32" ]

            @
            #else           [ #data #present ] [ #last:instance ] [ #data fields ]
            #modify         [ #data #scope:identifier ] [ #last:selector ] [ #data #scope:type ] [ #last:instance ]
            #string         [ #data "%type." ] [ #scope:prefix ] [ #scope:identifier ]
            #modify         [ #data #scope:mangled ] [ #last ]
            #path           [ #data #scope:entry:types ] [ #scope:identifier ] [ #data mangled_name ]
            #modify         [ #last ] [ #scope:mangled ]
            #end
            #end

            @
            #iterate        [ #scope:entry:labels ]
            #modify         [ #data #scope:label ] [ #last:selector ] [ #data #scope:value ] [ #last:instance ]
            #string         [ #data "@label." ] [ #scope:prefix ] [ #scope:label ]
            #modify         [ #data #scope:mangled ] [ #last ]
            #path           [ #data #scope:entry:labels ] [ #scope:label ] [ #data mangled_name ]
            #modify         [ #last ] [ #scope:mangled ]
            #end

            @
            #iterate        [ #scope:entry:namespaces ]
            #modify         [ #data #scope:name ] [ #last:selector ] [ #data #scope:scope ] [ #last:instance ]
            #string         [ #scope:prefix ] [ #scope:name ] [ #data '.' ]
            #modify         [ #data #scope:new_prefix ] [ #last ]

            @
            #path           [ #scope:path ] [ #data namespace ] [ #scope:name ]
            #call           [ #function:generate:mangle ] [ #last ] [ #scope:new_prefix ]
            #end

            @
            #modify         [ #scope:path ] [ #scope:entry ]
        ]

        level [ [ #single entry ]

            @
            #modify         [ #data #scope:types ] [ #data { } ]
            #modify         [ #data #scope:labels ] [ #data { } ]

            @
            #iterate        [ #scope:entry:types ]
            #if             [ #data #present ] [ #last:instance ] [ #data fields ]
            #insert         [ #scope:types ] [ #last:instance:mangled_name ] [ #last:instance ]
            #modify         [ #data #scope:types ] [ #last ]
            #end
            #end

            @
            #iterate        [ #scope:entry:labels ]
            #insert         [ #scope:labels ] [ #last:instance:mangled_name ] [ #last:instance ]
            #modify         [ #data #scope:labels ] [ #last ]
            #end

            @
            #iterate        [ #scope:entry:namespaces ]
            #call           [ #function:generate:level ] [ #last:instance ]
            #merge          [ #scope ] [ #last ]
            #modify         [ #data #scope ] [ #last ]
            #end

            @
            #map            [ #data types ] [ #scope:types ] [ #data labels ] [ #scope:labels ]
            #return         [ #last ]
        ]

        top [ [ #single self ]

            @ if debug is enabled, print the current pass
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:print_pass ] [ #data "generate" ]
            #end

            @ create empty string for the generated code
            #modify         [ #data #scope:code ] [ #data "" ]

            @ debug message
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:#print:debug ] [ #data "generating llvm type names" ]
            #end

            @ mangle function and type names from all modules and combine them into lists
            #call           [ #function:generate:mangle ] [ #data #build:root_scope ] [ #data "main." ]
            #call           [ #function:generate:level ] [ #build:root_scope ]
            #modify         [ #data #scope:mangled ] [ #last ]

            #keys           [ #scope:mangled:types ]
            #print_line     [ #last ]
            #keys           [ #scope:mangled:labels ]
            #print_line     [ #last ]

            @ generate llvm composite types
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:#print:debug ] [ #data "generating llvm types" ]
            #end

            @
            #iterate        [ #scope:mangled:types ]
                #modify         [ #data #scope:name ] [ #last:selector ] [ #data #scope:entry ] [ #last:instance ]

                @
                #if             [ #data #present ] [ #scope:entry ] [ #data fields ]
                    #modify         [ #data #scope:fields ] [ #data " " ]
                    #iterate        [ #scope:entry:fields ]
                        #modify         [ #data #scope:field_entry ] [ #last:instance ] [ #data #scope:index ] [ #last:selector ]
                        #resolve        [ #scope:field_entry:real_type ]
                        #call           [ #function:resolve_alias ] [ #last ]
                        #string         [ #scope:fields ] [ #last:mangled_name ]

                        @
                        #if             [ #data #not_equals ] [ #scope:field_entry:instance_type ] [ #data real ]
                        #string         [ #last ] [ #data '*' ]
                        #end

                        @
                        #if             [ #data #smaller ] [ #scope:index ] [ #scope:entry:fields ]
                        #string         [ #last ] [ #data ", " ]
                        #else
                        #string         [ #last ] [ #data " " ]
                        #end

                        @
                        #modify         [ #data #scope:fields ] [ #last ]
                    #end

                    @
                    #string         [ #scope:code ] [ #scope:name ] [ #data " = type {" ] [ #scope:fields ] [ #data "}\n\n" ]
                    #modify         [ #data #scope:code ] [ #last ]
                #end
            #end

            @ generate main function
            #string         [ #scope:code ] [ #data "define i32 @main(i32 %argc, i8** %argv) nounwind {\nentry:\n" ]
            #string         [ #last ] [ #data "    ret i32 0\n}\n" ]
            #modify         [ #data #scope:code ] [ #last]

            @ insert code and return
            #modify         [ #data #build:code ] [ #scope:code ]
            #return         [ #scope:self ]
        ]
    }
}
